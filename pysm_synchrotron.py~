import numpy as np
import healpy as hp
from pysm_packages.pysm import scale_freqs, convert_units, bandpass_integrated, component, output
import ConfigParser

def main():

	print('Computing synchrotron map.')
	print '----------------------------------------------------- \n'
#Read in configuration file to classes.
	Config = ConfigParser.ConfigParser()
	Config.read('pysm_config.ini')
	out = output(Config._sections['GlobalParameters'])
	synch = component(Config._sections['Synchrotron'])
#The unit conversion takes care of the scaling being done in MJysr. After scaling we convert to whatever the output units are.
	conv1 = convert_units(synch.template_units, ['M','Jysr'], synch.freq_ref)
	conv2 = convert_units(['M','Jysr'],out.output_units,out.output_frequency)
	unit_conversion = conv1*conv2.reshape((len(out.output_frequency),1))
#Do the scaling.

#	scaled_map_synch = scale_freqs(synch,out,pol=False)*synch.em_template*unit_conversion
#	scaled_map_synch_polu = scale_freqs(synch,out,pol=True)*synch.polu_em_template*unit_conversion

	scaled_map_synch = scale_freqs(synch.model,out.output_frequency,synch.beta_template,synch.freq_ref,synch.curvefreq,synch.beta_curve,None)*synch.em_template*unit_conversion
	scaled_map_synch_polu = scale_freqs(synch.model,out.output_frequency,synch.beta_template,synch.pol_freq_ref,synch.curvefreq,synch.beta_curve,None)*synch.polu_em_template*unit_conversion
	scaled_map_synch_polq = scale_freqs(synch.model,out.output_frequency,synch.beta_template,synch.pol_freq_ref,synch.curvefreq,synch.beta_curve,None)*synch.polq_em_template*unit_conversion

	for i in range(0,len(out.output_frequency)):
		syn = [scaled_map_synch[i],scaled_map_synch_polq[i],scaled_map_synch_polu[i]]
		hp.write_map(synch.output_dir+'pysm_run/'+'synch_%d.fits'%(out.output_frequency[i]),syn,coord='G',column_units=out.output_units)

	del synch, syn


